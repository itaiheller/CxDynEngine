/*
 * Provide Gradle build profile support
 * 
 * from: https://www.credera.com/blog/technology-insights/java/gradle-profiles-for-multi-project-spring-boot-applications/
 */
 
subprojects {
    // ----
    // How to use Profiles with -P arguments
    // ----
    //
    // Run gradle bootRun tasks with the -P argument to utilize a profile.
    //
    // For example, within a subproject's directory:
    // gradle -Paws bootRun
    //
    // Or, if in the parent project's directory,
    // individual projects can be targeted using their name:
    // gradle -Paws :cx-dyn-engines-app:bootRun
    
    def awsProfile='aws'
    def vmwareProfile='vmware'
    def activeProfile;
    
    if (project.hasProperty('aws')) {
        // Used for AWS engine hosting
        activeProfile = awsProfile
        apply from: rootProject.file('gradle/profile-aws.gradle');
        
    } else if (project.hasProperty('vmware')) {
        // Used for Vmware engine hosting
        activeProfile = vmwareProfile
        apply from: rootProject.file('gradle/profile-vmware.gradle');
    
    } else {
        // Default to aws when no profile property is specified
        activeProfile = awsProfile
        apply from: rootProject.file('gradle/profile-aws.gradle');
    }
    println 'Using profile: "' + activeProfile + '" for ' + project.getName()
    
    // bootRun will rely on the -P profile argument, 
    // defaulting to the "aws" profile if no -P arguments are provided
    bootRun {
        systemProperties = System.properties
        systemProperties.put('spring.profiles.active', activeProfile)
    }
    
    project.ext.set('activeProfile', activeProfile)
    
    // Alternative to using the extended bootRun task above to set properties.
    // Comment out the bootRun task extension above (lines 45 to 63) and un-comment this task (lines 72 to 78) to try it.
    // 
    // Appends properties to each subproject's application.properties file during compilation,
    // which ensures WARs and JARs always run with the profiles they were built with.
    // Also works with the bootRun task without requiring it to be extended.
    // Defaults to the "test" profile if no -P arguments are provided.
    // classes << {
    //     println 'Adding spring.profiles.active=' + activeProfile + ' to application.properties'
    //     FileTree tree = fileTree(dir: "build/resources/main").include("application.properties")
    //     tree.each { File file ->
    //         file.append('\nspring.profiles.active=' + activeProfile);
    //     }
    // }

}